import java.util.*;
import jdk.internal.org.objectweb.asm.*;
public class TryCatchDump implements Opcodes {

public static byte[] dump () throws Exception {

ClassWriter cw = new ClassWriter(0);
FieldVisitor fv;
MethodVisitor mv;
AnnotationVisitor av0;

cw.visit(52, ACC_PUBLIC + ACC_SUPER, "TryCatch", null, "java/lang/Object", null);

cw.visitSource("TryCatch.java", null);

{
mv = cw.visitMethod(ACC_PUBLIC, "<init>", "()V", null, null);
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(5, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V", false);
mv.visitInsn(RETURN);
mv.visitMaxs(1, 1);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "run", "(Ljava/lang/String;)I", null, null);
mv.visitCode();
Label l0 = new Label();
Label l1 = new Label();
Label l2 = new Label();
mv.visitTryCatchBlock(l0, l1, l2, "java/lang/Throwable");
Label l3 = new Label();
Label l4 = new Label();
Label l5 = new Label();
mv.visitTryCatchBlock(l3, l4, l5, "java/lang/Throwable");
Label l6 = new Label();
Label l7 = new Label();
Label l8 = new Label();
mv.visitTryCatchBlock(l6, l7, l8, "java/lang/Throwable");
Label l9 = new Label();
mv.visitTryCatchBlock(l6, l7, l9, null);
Label l10 = new Label();
Label l11 = new Label();
Label l12 = new Label();
mv.visitTryCatchBlock(l10, l11, l12, "java/lang/Throwable");
Label l13 = new Label();
mv.visitTryCatchBlock(l8, l13, l9, null);
Label l14 = new Label();
Label l15 = new Label();
Label l16 = new Label();
mv.visitTryCatchBlock(l14, l15, l16, "java/io/IOException");
Label l17 = new Label();
Label l18 = new Label();
mv.visitTryCatchBlock(l17, l18, l16, "java/io/IOException");
Label l19 = new Label();
mv.visitTryCatchBlock(l14, l15, l19, null);
mv.visitTryCatchBlock(l17, l18, l19, null);
Label l20 = new Label();
mv.visitTryCatchBlock(l16, l20, l19, null);
Label l21 = new Label();
mv.visitTryCatchBlock(l19, l21, l19, null);
mv.visitLabel(l14);
mv.visitLineNumber(7, l14);
mv.visitTypeInsn(NEW, "java/io/BufferedReader");
mv.visitInsn(DUP);
mv.visitTypeInsn(NEW, "java/io/FileReader");
mv.visitInsn(DUP);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKESPECIAL, "java/io/FileReader", "<init>", "(Ljava/lang/String;)V", false);
mv.visitMethodInsn(INVOKESPECIAL, "java/io/BufferedReader", "<init>", "(Ljava/io/Reader;)V", false);
mv.visitVarInsn(ASTORE, 2);
mv.visitInsn(ACONST_NULL);
mv.visitVarInsn(ASTORE, 3);
mv.visitLabel(l6);
mv.visitLineNumber(8, l6);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKESTATIC, "TryCatch", "NextLineSize", "(Ljava/io/BufferedReader;)I", false);
mv.visitJumpInsn(IFLE, l17);
Label l22 = new Label();
mv.visitLabel(l22);
mv.visitLineNumber(9, l22);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKESTATIC, "TryCatch", "NextLineSize", "(Ljava/io/BufferedReader;)I", false);
mv.visitVarInsn(ISTORE, 4);
mv.visitLabel(l7);
mv.visitLineNumber(11, l7);
mv.visitVarInsn(ALOAD, 2);
mv.visitJumpInsn(IFNULL, l15);
mv.visitVarInsn(ALOAD, 3);
Label l23 = new Label();
mv.visitJumpInsn(IFNULL, l23);
mv.visitLabel(l0);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/BufferedReader", "close", "()V", false);
mv.visitLabel(l1);
mv.visitJumpInsn(GOTO, l15);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_FULL, 5, new Object[] {"TryCatch", "java/lang/String", "java/io/BufferedReader", "java/lang/Throwable", Opcodes.INTEGER}, 1, new Object[] {"java/lang/Throwable"});
mv.visitVarInsn(ASTORE, 5);
mv.visitVarInsn(ALOAD, 3);
mv.visitVarInsn(ALOAD, 5);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Throwable", "addSuppressed", "(Ljava/lang/Throwable;)V", false);
mv.visitJumpInsn(GOTO, l15);
mv.visitLabel(l23);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/BufferedReader", "close", "()V", false);
mv.visitLabel(l15);
mv.visitLineNumber(14, l15);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitFieldInsn(GETSTATIC, "java/lang/System", "out", "Ljava/io/PrintStream;");
mv.visitLdcInsn("Read Line Length.");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/PrintStream", "println", "(Ljava/lang/String;)V", false);
Label l24 = new Label();
mv.visitLabel(l24);
mv.visitLineNumber(9, l24);
mv.visitVarInsn(ILOAD, 4);
mv.visitInsn(IRETURN);
mv.visitLabel(l17);
mv.visitLineNumber(11, l17);
mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
mv.visitVarInsn(ALOAD, 2);
mv.visitJumpInsn(IFNULL, l18);
mv.visitVarInsn(ALOAD, 3);
Label l25 = new Label();
mv.visitJumpInsn(IFNULL, l25);
mv.visitLabel(l3);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/BufferedReader", "close", "()V", false);
mv.visitLabel(l4);
mv.visitJumpInsn(GOTO, l18);
mv.visitLabel(l5);
mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/Throwable"});
mv.visitVarInsn(ASTORE, 4);
mv.visitVarInsn(ALOAD, 3);
mv.visitVarInsn(ALOAD, 4);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Throwable", "addSuppressed", "(Ljava/lang/Throwable;)V", false);
mv.visitJumpInsn(GOTO, l18);
mv.visitLabel(l25);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/BufferedReader", "close", "()V", false);
mv.visitJumpInsn(GOTO, l18);
mv.visitLabel(l8);
mv.visitLineNumber(7, l8);
mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/Throwable"});
mv.visitVarInsn(ASTORE, 4);
mv.visitVarInsn(ALOAD, 4);
mv.visitVarInsn(ASTORE, 3);
mv.visitVarInsn(ALOAD, 4);
mv.visitInsn(ATHROW);
mv.visitLabel(l9);
mv.visitLineNumber(11, l9);
mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/Throwable"});
mv.visitVarInsn(ASTORE, 6);
mv.visitLabel(l13);
mv.visitVarInsn(ALOAD, 2);
Label l26 = new Label();
mv.visitJumpInsn(IFNULL, l26);
mv.visitVarInsn(ALOAD, 3);
Label l27 = new Label();
mv.visitJumpInsn(IFNULL, l27);
mv.visitLabel(l10);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/BufferedReader", "close", "()V", false);
mv.visitLabel(l11);
mv.visitJumpInsn(GOTO, l26);
mv.visitLabel(l12);
mv.visitFrame(Opcodes.F_FULL, 7, new Object[] {"TryCatch", "java/lang/String", "java/io/BufferedReader", "java/lang/Throwable", Opcodes.TOP, Opcodes.TOP, "java/lang/Throwable"}, 1, new Object[] {"java/lang/Throwable"});
mv.visitVarInsn(ASTORE, 7);
mv.visitVarInsn(ALOAD, 3);
mv.visitVarInsn(ALOAD, 7);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Throwable", "addSuppressed", "(Ljava/lang/Throwable;)V", false);
mv.visitJumpInsn(GOTO, l26);
mv.visitLabel(l27);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/BufferedReader", "close", "()V", false);
mv.visitLabel(l26);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 6);
mv.visitInsn(ATHROW);
mv.visitLabel(l18);
mv.visitLineNumber(14, l18);
mv.visitFrame(Opcodes.F_FULL, 2, new Object[] {"TryCatch", "java/lang/String"}, 0, new Object[] {});
mv.visitFieldInsn(GETSTATIC, "java/lang/System", "out", "Ljava/io/PrintStream;");
mv.visitLdcInsn("Read Line Length.");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/PrintStream", "println", "(Ljava/lang/String;)V", false);
Label l28 = new Label();
mv.visitLabel(l28);
mv.visitLineNumber(15, l28);
Label l29 = new Label();
mv.visitJumpInsn(GOTO, l29);
mv.visitLabel(l16);
mv.visitLineNumber(11, l16);
mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/io/IOException"});
mv.visitVarInsn(ASTORE, 2);
Label l30 = new Label();
mv.visitLabel(l30);
mv.visitLineNumber(12, l30);
mv.visitVarInsn(ALOAD, 2);
mv.visitFieldInsn(GETSTATIC, "java/lang/System", "err", "Ljava/io/PrintStream;");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/IOException", "printStackTrace", "(Ljava/io/PrintStream;)V", false);
mv.visitLabel(l20);
mv.visitLineNumber(14, l20);
mv.visitFieldInsn(GETSTATIC, "java/lang/System", "out", "Ljava/io/PrintStream;");
mv.visitLdcInsn("Read Line Length.");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/PrintStream", "println", "(Ljava/lang/String;)V", false);
Label l31 = new Label();
mv.visitLabel(l31);
mv.visitLineNumber(15, l31);
mv.visitJumpInsn(GOTO, l29);
mv.visitLabel(l19);
mv.visitLineNumber(14, l19);
mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/Throwable"});
mv.visitVarInsn(ASTORE, 8);
mv.visitLabel(l21);
mv.visitFieldInsn(GETSTATIC, "java/lang/System", "out", "Ljava/io/PrintStream;");
mv.visitLdcInsn("Read Line Length.");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/PrintStream", "println", "(Ljava/lang/String;)V", false);
Label l32 = new Label();
mv.visitLabel(l32);
mv.visitLineNumber(15, l32);
mv.visitVarInsn(ALOAD, 8);
mv.visitInsn(ATHROW);
mv.visitLabel(l29);
mv.visitLineNumber(16, l29);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitInsn(ICONST_0);
mv.visitInsn(IRETURN);
mv.visitMaxs(5, 9);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PROTECTED + ACC_STATIC, "NextLineSize", "(Ljava/io/BufferedReader;)I", null, new String[] { "java/io/IOException" });
mv.visitCode();
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitLineNumber(20, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/BufferedReader", "readLine", "()Ljava/lang/String;", false);
mv.visitVarInsn(ASTORE, 1);
Label l1 = new Label();
mv.visitLabel(l1);
mv.visitLineNumber(21, l1);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "length", "()I", false);
mv.visitInsn(IRETURN);
mv.visitMaxs(1, 2);
mv.visitEnd();
}
cw.visitEnd();

return cw.toByteArray();
}
}
